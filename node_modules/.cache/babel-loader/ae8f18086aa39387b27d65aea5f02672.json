{"ast":null,"code":"import HelloWorld from '../components/HelloWorld';\nimport axios from 'axios';\nimport Vue from 'vue'; // import VueAxios from 'vue-axios'\n\nVue.use(axios);\nexport default {\n  name: 'HomeView',\n  components: {\n    HelloWorld\n  },\n\n  data() {\n    return {\n      sub: '',\n      crdts: '',\n      tchr: '',\n      // name: '',\n      // pswd_length: '',\n      // email: '',\n      // generatedPassword: '',\n      // isEdit : false,\n      rules: {\n        required: value => !!value || 'Required.',\n        counter: value => value.length <= 30 || 'Max 30 characters',\n        email: value => {\n          const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n          return pattern.test(value) || 'Invalid e-mail.';\n        },\n        name: value => {\n          const pattern = /^[a-zA-Z\\s]*$/;\n          return pattern.test(value) || 'Invalid name';\n        },\n        Password_length: value => {\n          const pattern = /^([8-9]|1[0-9]|20)*$/;\n          return pattern.test(value) || 'Input must be number and Length must be 8 to 20 characters';\n        }\n      },\n      row: '',\n      //   items: [\n      //     'Tamil Nadu',\n      //     'Andhra',\n      //     'Kerala',\n      //     'Karnataka',\n      //   ],\n      // selected: [],\n      formData: [],\n      list: []\n    };\n  },\n\n  mounted() {\n    Vue.axios.get('http://127.0.0.1:3333/class/').then(response => {\n      this.list = response.data;\n      console.log(this.list);\n    });\n  },\n\n  methods: {//   clearForm(){\n    //   this.name = \"\"\n    //   this.email = \"\"\n    //   this.select = \"\"\n    //   this.row = \"\"\n    //   this.selected = \"\"\n    //   },\n    //   pswd_generate() {\n    //     const Allowed = {\n    //     Uppers: \"QWERTYUIOPASDFGHJKLZXCVBNM\",\n    //     Lowers: \"qwertyuiopasdfghjklzxcvbnm\",\n    //     Numbers: \"1234567890\",\n    //     Symbols: \"!@#$%^&*\"\n    //   }\n    //   const randomChar = (str) => str.charAt(Math.floor(Math.random() * str.length))\n    //   const generate = (length=this.pswd_length) => { \n    //     let pwd = \"\";\n    //     if(8<=this.pswd_length && this.pswd_length<=20){\n    //     pwd += randomChar(Allowed.Uppers);\n    //     pwd += randomChar(Allowed.Lowers); \n    //     pwd += randomChar(Allowed.Numbers); \n    //     pwd += randomChar(Allowed.Symbols);\n    //     for (let i = pwd.length; i < length; i++)\n    //         pwd += randomChar(Object.values(Allowed).join(''));\n    //     this.generatedPassword = pwd;\n    //     }\n    //     else\n    //     {\n    //      this.generatedPassword = ''\n    //     }\n    //   }\n    //   generate()\n    //   },\n    //   submitdata()\n    //   {\n    //     this.formData.push( {\n    //         name:this.name,\n    //         email:this.email,\n    //         address:this.select,\n    //         gender:this.row,\n    //         hobbies:this.selected\n    //   })\n    //   this.clearForm()\n    // },\n    // deletedata(index)\n    //   {\n    //   this.formData.splice(index, 1);\n    //   },\n    // editData(index){\n    //    console.log(this.formData[index].address)\n    //   this.name = this.formData[index].name\n    //   this.email = this.formData[index].email\n    //   this.select = this.formData[index].address\n    //   this.row = this.formData[index].gender\n    //   this.selected = this.formData[index].hobbies\n    //   this.index = index\n    //   this.isEdit = true\n    // },\n    // updateData(index){\n    //   this.formData[index].name = this.name\n    //   this.formData[index].email = this.email\n    //   this.formData[index].address = this.select\n    //   this.formData[index].row =  this.row\n    //   this.formData[index].selected = this.selected\n    //   this.isEdit = false\n    // },\n  },\n  computed: {// enablesubmit() {\n    //   if(this.name.length ==0 || this.email.length ==0 || this.pswd_length.length ==0 || this.generatedPassword.length ==0 || this.select.length ==0 || this.row ==0 || this.selected ==0){\n    //     return true;\n    //   }\n    //   else{\n    //     return false\n    //     }\n    //   }\n  },\n  filters: {// truncate: function (text, length, suffix) {\n    //     if (text.length > length) {\n    //         return text.substring(0, length) + suffix;\n    //     } else {\n    //         return text;\n    //     }\n    // },\n  }\n};","map":{"version":3,"mappings":"AA8OA;AACA;AACA,sB,CACA;;AACAA;AAEA;EACAC,gBADA;EAGAC;IACAC;EADA,CAHA;;EAMAC;IACA;MACAC,OADA;MAEAC,SAFA;MAGAC,QAHA;MAKA;MACA;MACA;MACA;MACA;MAEAC;QACAC,yCADA;QAEAC,2DAFA;QAGAC;UACA;UACA;QACA,CANA;QAOAV;UACA;UACA;QACA,CAVA;QAWAW;UACA;UACA;QACA;MAdA,CAXA;MA4BAC,OA5BA;MA8BA;MACA;MACA;MACA;MACA;MACA;MAEA;MACAC,YAtCA;MAuCAC;IAvCA;EAyCA,CAhDA;;EAiDAC;IACAhB,8CACAiB,IADA,CACAC;MACA;MACAC;IACA,CAJA;EAKA,CAvDA;;EAyDAC,UACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IAEA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;EA/EA,CAzDA;EA0IAC,WACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EARA,CA1IA;EAqJAC,UACA;IACA;IACA;IACA;IACA;IACA;IACA;EAPA;AArJA","names":["Vue","name","components","HelloWorld","data","sub","crdts","tchr","rules","required","counter","email","Password_length","row","formData","list","mounted","then","response","console","methods","computed","filters"],"sourceRoot":"src/views","sources":["HomeView.vue"],"sourcesContent":["<template>\n  <div>\n    \n    <v-container fluid>\n      <v-row>\n        <v-card\n    class=\"mx-auto\"\n    max-width=\"1000\"\n    outlined\n    >\n       <v-col class=\"div1\">\n            <v-text-field\n              value=\"\"\n              v-model=\"sub\"\n              label=\"Subject\"\n              counter\n              maxlength=\"30\"\n              :rules=\"[rules.required, rules.name]\"\n              outlined\n            ></v-text-field>\n\n            <v-text-field\n              value=\"\"\n              v-model=\"crdts\"\n              label=\"Credits\"\n              counter\n              maxlength=\"50\"\n              :rules=\"[rules.required, rules.email]\"\n              outlined\n            ></v-text-field>\n\n            <v-text-field\n              value=\"\"\n              v-model=\"tchr\"\n              label=\"Teacher\"\n              counter\n              maxlength=\"50\"\n              :rules=\"[rules.required, rules.email]\"\n              outlined\n            ></v-text-field>\n\n            <!-- <v-text-field\n              value=\"\"\n              v-model=\"email\"\n              label=\"Email\"\n              counter\n              maxlength=\"50\"\n              :rules=\"[rules.required, rules.email]\"\n              outlined\n            ></v-text-field>\n           -->\n          <!-- <v-row>\n            <v-col sm=\"9\">\n              <v-combobox\n                v-model=\"select\"\n                :items=\"items\"\n                label=\"Address\"\n                single\n                outlined\n                dense\n                :rules=\"[rules.required]\"\n              ></v-combobox>\n            </v-col>\n          </v-row>\n           -->\n          <!-- <v-row>\n            <v-col sm=\"5\">\n              <v-text-field\n              value=\"\"\n              v-model=\"pswd_length\"\n              label=\"Password size\"\n              :rules=\"[rules.required,rules.Password_length]\"\n              outlined\n              ></v-text-field>\n            </v-col> -->\n      \n            <!-- <v-col>\n              <v-btn @click=\"pswd_generate\"\n                depressed\n                color=\"primary\"\n                >Generate password</v-btn>\n            </v-col>\n          </v-row> -->\n      \n          \n              <!-- <v-text-field\n                value=''\n                v-model=\"generatedPassword\"\n                label=\"Generated Password\"\n                outlined\n                readonly\n                ></v-text-field> -->\n\n      \n         \n            <!-- <label>Gender:</label>\n              <v-radio-group\n                :rules=\"[rules.required]\"\n                v-model=\"row\"\n                row\n                >\n              <v-radio\n                label=\"Male\"\n                color=\"blue\"\n                value=\"Male\"\n              ></v-radio>\n              <v-radio\n                label=\"Female\"\n                color=\"pink lighten-2\"\n                value=\"Female\"\n              ></v-radio>\n              </v-radio-group>\n           -->\n    \n              \n          <!-- <label>Hobbies:</label>\n              <v-row>\n                <v-col>\n                  <v-checkbox\n                    v-model=\"selected\"\n                    label=\"Books\"\n                    value=\"Books\"\n                  ></v-checkbox>\n                </v-col>\n                <v-col>\n                  <v-checkbox\n                    v-model=\"selected\"\n                    label=\"Music\"\n                    value=\"Music\"\n                  ></v-checkbox>\n                </v-col>\n                <v-col>\n                  <v-checkbox\n                    v-model=\"selected\"\n                    label=\"Sports\"\n                    value=\"Sports\"\n                  ></v-checkbox>\n                </v-col>\n                <v-col>\n                  <v-checkbox\n                    v-model=\"selected\"\n                    label=\"Movies\"\n                    value=\"Movies\"\n                  ></v-checkbox>\n                </v-col>\n              </v-row> -->\n            \n          <!-- <v-row>\n            <v-col></v-col>\n            <v-col>\n\n            <v-btn v-if=\"!isEdit\" depressed color =\"primary\" v-on:click=\"submitdata()\">SUBMIT</v-btn>\n            <v-btn v-else depressed color =\"primary\" v-on:click=\"updateData(index)\">UPDATE</v-btn>\n            </v-col>\n            <v-col></v-col>\n          </v-row> -->\n          </v-col>\n    </v-card>     \n\n        \n        <v-col>\n          <v-simple-table class=\"table1\">\n              <template v-slot:default>\n                <table border=\"1px\">\n                <thead>\n                  <tr>\n                    <th class=\"text-left\">\n                      class_id\n                    </th>\n                    <th class=\"text-left\">\n                      Subject\n                    </th>\n                    <th class=\"text-left\">\n                      Credits\n                    </th>\n                    <th class=\"text-left\">\n                      Teacher\n                    </th>\n                    <!-- <th class=\"text-left\">\n                      gender\n                    </th>\n                    <th class=\"text-left\">\n                      hobbies\n                    </th>\n                    <th class=\"text-left\">\n                      action1\n                    </th>\n                    <th class=\"text-left\">\n                      action2\n                    </th> -->\n                  </tr>\n                </thead>\n                </table>\n                <tbody>\n                  <tr v-for=\"item in list\" v-bind:key=\"item.class_id\">\n                    <td>{{ item.subject }}</td>\n                    <td>{{ item.credits }}</td>\n                    <td>{{ item.teacher }}</td>\n                  </tr>\n                 <!-- <tr v-for=\"(item, index) in formData\" :key=\"index\">\n                  <th scope=\"row\">{{ index+1 }}</th>\n                    <td>{{ item.name | truncate(10, '...')}}</td>\n                    <td>{{ item.email }}</td>\n                    <td>{{ item.address }}</td>\n                    <td>{{ item.gender }}</td>\n                    <td>{{ item.hobbies }}</td>\n                    \n                    <td><v-btn\n                          depressed\n                          color=\"error\"\n                          @click=\"deletedata(index)\"\n                        >\n                          Delete\n                        </v-btn></td>\n\n                    <td><v-btn\n                          depressed\n                          color=\"success\"\n                          @click=\"editData(index)\"\n                        >\n                          Edit\n                        </v-btn></td>\n                  </tr> -->\n                </tbody>\n              </template>\n          </v-simple-table>\n    \n          <HelloWorld />\n        </v-col>\n      </v-row>\n    </v-container>\n   \n  </div> \n</template>\n\n\n<script>\n  \n  import HelloWorld from '../components/HelloWorld'\n  import axios from 'axios';\n  import Vue from 'vue'\n  // import VueAxios from 'vue-axios'\n  Vue.use(axios)\n\n  export default {\n    name: 'HomeView',\n\n    components: {\n      HelloWorld,\n    },\n    data () {\n      return {\n        sub:'',\n        crdts:'',\n        tchr:'',\n\n        // name: '',\n        // pswd_length: '',\n        // email: '',\n        // generatedPassword: '',\n        // isEdit : false,\n        \n        rules: {\n          required: value => !!value || 'Required.',\n          counter: value => value.length <= 30 || 'Max 30 characters',\n          email: value => {\n            const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n            return pattern.test(value) || 'Invalid e-mail.'\n          },\n          name: value => {\n            const pattern = /^[a-zA-Z\\s]*$/\n            return pattern.test(value) || 'Invalid name'\n          },\n          Password_length: value => {\n            const pattern = /^([8-9]|1[0-9]|20)*$/\n            return pattern.test(value) || 'Input must be number and Length must be 8 to 20 characters'\n          },\n        \n        },\n        row:'',\n        \n      //   items: [\n      //     'Tamil Nadu',\n      //     'Andhra',\n      //     'Kerala',\n      //     'Karnataka',\n      //   ],\n      \n      // selected: [],\n      formData: [],\n      list: []\n      } \n    },\n    mounted(){\n      Vue.axios.get('http://127.0.0.1:3333/class/')\n      .then((response) => {\n      this.list=response.data\n      console.log(this.list);\n      })\n    },\n\n    methods: {\n    //   clearForm(){\n\n    //   this.name = \"\"\n    //   this.email = \"\"\n    //   this.select = \"\"\n    //   this.row = \"\"\n    //   this.selected = \"\"\n    //   },\n    //   pswd_generate() {\n    //     const Allowed = {\n    //     Uppers: \"QWERTYUIOPASDFGHJKLZXCVBNM\",\n    //     Lowers: \"qwertyuiopasdfghjklzxcvbnm\",\n    //     Numbers: \"1234567890\",\n    //     Symbols: \"!@#$%^&*\"\n    //   }\n    //   const randomChar = (str) => str.charAt(Math.floor(Math.random() * str.length))\n    //   const generate = (length=this.pswd_length) => { \n    //     let pwd = \"\";\n    //     if(8<=this.pswd_length && this.pswd_length<=20){\n    //     pwd += randomChar(Allowed.Uppers);\n    //     pwd += randomChar(Allowed.Lowers); \n    //     pwd += randomChar(Allowed.Numbers); \n    //     pwd += randomChar(Allowed.Symbols);\n    //     for (let i = pwd.length; i < length; i++)\n    //         pwd += randomChar(Object.values(Allowed).join(''));\n    //     this.generatedPassword = pwd;\n    //     }\n    //     else\n    //     {\n    //      this.generatedPassword = ''\n    //     }\n\n    //   }\n    //   generate()\n    //   },\n\n    //   submitdata()\n    //   {\n      \n    //     this.formData.push( {\n        \n    //         name:this.name,\n    //         email:this.email,\n    //         address:this.select,\n    //         gender:this.row,\n    //         hobbies:this.selected\n          \n    //   })\n    //   this.clearForm()\n    // },\n\n    // deletedata(index)\n    //   {\n    //   this.formData.splice(index, 1);\n    //   },\n\n\n    // editData(index){\n    //    console.log(this.formData[index].address)\n    //   this.name = this.formData[index].name\n    //   this.email = this.formData[index].email\n    //   this.select = this.formData[index].address\n    //   this.row = this.formData[index].gender\n    //   this.selected = this.formData[index].hobbies\n    //   this.index = index\n    //   this.isEdit = true\n\n    // },\n\n    // updateData(index){\n    \n    //   this.formData[index].name = this.name\n    //   this.formData[index].email = this.email\n    //   this.formData[index].address = this.select\n    //   this.formData[index].row =  this.row\n    //   this.formData[index].selected = this.selected\n    //   this.isEdit = false\n\n    // },\n},\n    computed:{\n      // enablesubmit() {\n      //   if(this.name.length ==0 || this.email.length ==0 || this.pswd_length.length ==0 || this.generatedPassword.length ==0 || this.select.length ==0 || this.row ==0 || this.selected ==0){\n      //     return true;\n      //   }\n      //   else{\n      //     return false\n      //     }\n      //   }\n    },\n\n     filters: {\n        // truncate: function (text, length, suffix) {\n        //     if (text.length > length) {\n        //         return text.substring(0, length) + suffix;\n        //     } else {\n        //         return text;\n        //     }\n        // },\n    }\n  }\n</script>\n\n<style>\n  /* .div1 {\n    margin:10px;\n    box-sizing: border-box;\n    border: solid black 1px;\n  } */\n\n  .table1 {\n    width:auto;\n    height:auto;\n    margin:10px;\n    box-sizing: border-box;\n    border: solid black 1px;\n    padding: 10px;\n  }\n\n</style>"]},"metadata":{},"sourceType":"module"}